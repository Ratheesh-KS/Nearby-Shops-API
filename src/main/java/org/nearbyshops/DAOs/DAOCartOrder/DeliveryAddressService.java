package org.nearbyshops.DAOs.DAOCartOrder;

import com.zaxxer.hikari.HikariDataSource;
import org.nearbyshops.Globals.Globals;
import org.nearbyshops.Model.ModelDelivery.DeliveryAddress;

import java.sql.*;
import java.util.ArrayList;


public class DeliveryAddressService {



	private HikariDataSource dataSource = Globals.getDataSource();
	
	public int saveAddress(DeliveryAddress deliveryAddress)
	{

		Connection connection = null;
		PreparedStatement statement = null;
		int rowIdOfInsertedRow = -1;

		String insertItemCategory = "INSERT INTO "
				+ DeliveryAddress.TABLE_NAME
				+ "("  
				+ DeliveryAddress.END_USER_ID + ","
				+ DeliveryAddress.PINCODE + ","
				+ DeliveryAddress.PHONE_NUMBER + ","

				+ DeliveryAddress.NAME + ","
				+ DeliveryAddress.CITY + ","
				+ DeliveryAddress.DELIVERY_ADDRESS + ","

				+ DeliveryAddress.LATITUDE + ","
				+ DeliveryAddress.LONGITUDE + ","
				+ DeliveryAddress.LANDMARK + ""
				+ " ) VALUES ( ?,?,? ,?,?,? ,?,?,? )";

/*
		+ "" + deliveryAddress.getEndUserID()	+ ","
				+ "" + deliveryAddress.getPincode() + ","
				+ "" + deliveryAddress.getPhoneNumber() + ","
				+ "'" + deliveryAddress.getName() + "',"
				+ "'" + deliveryAddress.getCity() + "',"
				+ "'" + deliveryAddress.getDeliveryAddress() + "',"
				+ "'" + deliveryAddress.getLandmark() + "'"*/
		
		try {
			
			connection = dataSource.getConnection();
			statement = connection.prepareStatement(insertItemCategory,Statement.RETURN_GENERATED_KEYS);

			statement.setObject(1,deliveryAddress.getEndUserID());
			statement.setObject(2,deliveryAddress.getPincode());
			statement.setObject(3,deliveryAddress.getPhoneNumber());

			statement.setString(4,deliveryAddress.getName());
			statement.setString(5,deliveryAddress.getCity());
			statement.setString(6,deliveryAddress.getDeliveryAddress());

			statement.setObject(7,deliveryAddress.getLatitude());
			statement.setObject(8,deliveryAddress.getLongitude());
			statement.setString(9,deliveryAddress.getLandmark());
			
			rowIdOfInsertedRow = statement.executeUpdate();
			
			ResultSet rs = statement.getGeneratedKeys();

			if(rs.next())
			{
				rowIdOfInsertedRow = rs.getInt(1);
			}
			
			
			
			System.out.println("Key autogenerated SaveDistributor: " + rowIdOfInsertedRow);
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		{
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		
		return rowIdOfInsertedRow;
	}
	


	public int updateAddress(DeliveryAddress address)
	{	
		String updateStatement = "UPDATE " + DeliveryAddress.TABLE_NAME

				+ " SET "
				+ DeliveryAddress.END_USER_ID + " = ?,"
				+ DeliveryAddress.LANDMARK + " = ?,"
				+ DeliveryAddress.DELIVERY_ADDRESS + " = ?,"

				+ DeliveryAddress.LATITUDE + " = ?,"
				+ DeliveryAddress.LONGITUDE + " = ?,"

				+ DeliveryAddress.CITY + " = ?,"
				+ DeliveryAddress.PHONE_NUMBER + " = ?,"
				+ DeliveryAddress.PINCODE + " = ?,"

				+ DeliveryAddress.NAME + " = ?"
				+ " WHERE " + DeliveryAddress.ID + " = ?";


		Connection connection = null;
		PreparedStatement statement = null;
		int updatedRows = -1;
		
		try {
			
			connection = dataSource.getConnection();
			statement = connection.prepareStatement(updateStatement);

			statement.setObject(1,address.getEndUserID());
			statement.setString(2,address.getLandmark());
			statement.setString(3,address.getDeliveryAddress());

			statement.setObject(4,address.getLatitude());
			statement.setObject(5,address.getLongitude());

			statement.setString(6,address.getCity());
			statement.setObject(7,address.getPhoneNumber());
			statement.setObject(8,address.getPincode());

			statement.setString(9,address.getName());

			statement.setObject(10,address.getId());


			updatedRows = statement.executeUpdate();

			System.out.println("Total rows updated: " + updatedRows);	
			
			//conn.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		
		{
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return updatedRows;
		
	}




	public int deleteAddress(int deliveryAddressID)
	{
		String deleteStatement = "DELETE FROM " + DeliveryAddress.TABLE_NAME + " WHERE " + DeliveryAddress.ID + " = ?";

		Connection connection= null;
		PreparedStatement statement = null;
		int rowsCountDeleted = 0;
		try {
			
			connection = dataSource.getConnection();
			statement = connection.prepareStatement(deleteStatement);
			statement.setInt(1,deliveryAddressID);

			rowsCountDeleted = statement.executeUpdate();
			System.out.println(" Deleted Count: " + rowsCountDeleted);

//			connection.close();
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		finally
		
		{
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
		
		return rowsCountDeleted;
	}
	


	
	public ArrayList<DeliveryAddress> readAddresses(Integer endUserID)
	{
		String query = "SELECT * FROM " + DeliveryAddress.TABLE_NAME;

		boolean isFirst = true;

		if(endUserID != null)
		{
			query = query + " WHERE " + DeliveryAddress.END_USER_ID + " = " + endUserID;

			isFirst = false;
		}



		ArrayList<DeliveryAddress> addressesList = new ArrayList<>();
		
		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;
		
		try {
			
			connection = dataSource.getConnection();
			statement = connection.createStatement();

			rs = statement.executeQuery(query);
			
			while(rs.next())
			{

				DeliveryAddress address = new DeliveryAddress();

				address.setEndUserID(rs.getInt(DeliveryAddress.END_USER_ID));
				address.setCity(rs.getString(DeliveryAddress.CITY));
				address.setDeliveryAddress(rs.getString(DeliveryAddress.DELIVERY_ADDRESS));
				address.setId(rs.getInt(DeliveryAddress.ID));
				address.setLandmark(rs.getString(DeliveryAddress.LANDMARK));

				address.setLatitude(rs.getDouble(DeliveryAddress.LATITUDE));
				address.setLongitude(rs.getDouble(DeliveryAddress.LONGITUDE));

				address.setName(rs.getString(DeliveryAddress.NAME));
				address.setPhoneNumber(rs.getLong(DeliveryAddress.PHONE_NUMBER));
				address.setPincode(rs.getLong(DeliveryAddress.PINCODE));

				addressesList.add(address);
			}
			

			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		

		finally
		
		{
			
			try {
					if(rs!=null)
					{rs.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
								
		return addressesList;
	}

	
	public DeliveryAddress readAddress(int addressID)
	{
		
		String query = "SELECT * FROM " + DeliveryAddress.TABLE_NAME
						+ " WHERE " + DeliveryAddress.ID + " = " + addressID;
		
		Connection connection = null;
		Statement statement = null;
		ResultSet rs = null;


//		DeliveryAddress deliveryAddress = null;
		DeliveryAddress address = null;
		
		try {
			
			connection = dataSource.getConnection();
			
			statement = connection.createStatement();
			rs = statement.executeQuery(query);
			
			while(rs.next())
			{

				address = new DeliveryAddress();

				address.setEndUserID(rs.getInt(DeliveryAddress.END_USER_ID));
				address.setCity(rs.getString(DeliveryAddress.CITY));
				address.setDeliveryAddress(rs.getString(DeliveryAddress.DELIVERY_ADDRESS));

				address.setId(rs.getInt(DeliveryAddress.ID));
				address.setLandmark(rs.getString(DeliveryAddress.LANDMARK));

				address.setLatitude(rs.getDouble(DeliveryAddress.LATITUDE));
				address.setLongitude(rs.getDouble(DeliveryAddress.LONGITUDE));

				address.setName(rs.getString(DeliveryAddress.NAME));
				address.setPhoneNumber(rs.getLong(DeliveryAddress.PHONE_NUMBER));
				address.setPincode(rs.getLong(DeliveryAddress.PINCODE));

			}
			
			
			//System.out.println("Total itemCategories queried " + itemCategoryList.size());	
	
		
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally
		
		{
			
			try {
					if(rs!=null)
					{rs.close();}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
			try {
			
				if(statement!=null)
				{statement.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				
				if(connection!=null)
				{connection.close();}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
		return address;
	}	
}
